#!/usr/bin/env zsh
# vi: set expandtab ft=zsh tw=80 ts=2

function runAndQuitApp() {
  # Start and quit a given sandboxed app, so that it can write out its preferences file.
  local app="${1}"
  osascript -e 'tell application "'"${app}"'"' -e 'activate' -e 'quit' -e 'end tell' >&! /dev/null || return
}

function getExecPrerequisites() {
  cmds+=(
    [osascript]=''
    [defaults]=''
    [plutil]=''
    [xattr]=''
    [chflags]=''
  )
}

function setDomainAndCurrentHostDefault() {
  domain=(${(s.,.)1:-NSGlobalDomain})
  currentHost="${2:+-currentHost}"
}

function xDefaults() {
  local domain= currentHost=
  setDomainAndCurrentHostDefault "$@"
  set - "${@:2}"
  defaults ${currentHost} export ${domain} - | plutil -replace $@ - -o - | defaults ${currentHost} import ${domain} -
}

function setCMDVariable() {
  local domain= currentHost=
  setDomainAndCurrentHostDefault "$@"
  set - "${@:2}"
  cmd=(defaults ${currentHost} write ${domain})
}

function checkDomain() {
  local domain= currentHost=
  setDomainAndCurrentHostDefault "$@"
  set - "${@:2}"
  defaults ${currentHost} read ${domain} >&! /dev/null || {
    local retval=$?
    loptty -- -w "Did not set ${domain}${currentHost:+ (currentHost)} preferences." -w  "Error message was: ${errmsg}."
    return $retval
  }
}

function setCMDVariableAndCheckDomain() {
  setCMDVariable "$@"
  checkDomain "$@"
}

function showLibraryFolder() {
  chflags nohidden "${HOME}/Library"
  xattr -d com.apple.FinderInfo $_ 2> /dev/null
}

function configureGlobalSettings() {
  local cmd=
  setCMDVariableAndCheckDomain || return
  ${cmd} AppleShowScrollbars Automatic
  ${cmd} AppleMeasurementUnits Centimeters
  ${cmd} com.apple.mouse.scaling -float 3.0
  ${cmd} com.apple.trackpad.scaling -float 3.0
  ${cmd} com.apple.springing.delay -float 0.2
  ${cmd} NSToolbarTitleViewRolloverDelay -float 0.0
  ${cmd} NSTableViewDefaultSizeMode -int 1
  ${cmd} NavPanelFileListModeForOpenMode -int 1
  ${cmd} AppleLocale "en_DE@currency=EUR"
  ${cmd} AppleLanguages -array en-US de-DE
  ${cmd} AppleWindowTabbingMode fullscreen

  ${cmd} AppleSpacesSwitchOnActivate -bool true
  ${cmd} AppleMenuBarVisibleInFullscreen -bool true
  ${cmd} AppleMetricUnits -bool true
  ${cmd} com.apple.springing.enabled -bool true
  ${cmd} com.apple.swipescrolldirection -bool true
  ${cmd} AppleInterfaceStyleSwitchesAutomatically -bool true
  ${cmd} NSNavPanelExpandedStateForSaveMode -bool true
  ${cmd} NSNavPanelExpandedStateForSaveMode2 -bool true
  ${cmd} PMPrintingExpandedStateForPrint -bool true
  ${cmd} PMPrintingExpandedStateForPrint2 -bool true
  ${cmd} AppleShowAllExtensions -bool true

  ${cmd} _HIHideMenuBar -bool false
  ${cmd} AppleReduceDesktopTinting -bool false
  ${cmd} AppleScrollerPagingBehavior -bool false
}

function configurePrintingApp() {
  local cmd=
  setCMDVariable com.apple.print.PrintingPrefs
  ${cmd} "Quit When Finished" -bool true
}

function configureScreensaver() {
  local cmd=
  setCMDVariableAndCheckDomain com.apple.screensaver currenthost || return
  ${cmd} PrefsVersion -int 100
  ${cmd} idleTime -int 0
  ${cmd} showClock -bool true
  ${cmd} moduleDict '
  <dict>
    <key>moduleName</key>
    <string>Hello</string>
    <key>path</key>
    <string>/Systems/Library/Screen Saver/Hello.saver</string>
    <key>type</key>
    <integer>0</integer>
  </dict>'
}

function configureDock() {
  local cmd=
  setCMDVariableAndCheckDomain com.apple.dock || return
  ${cmd} orientation bottom
  ${cmd} mineffect suck
  ${cmd} loc 'en_US:DE'
  ${cmd} region DE
  ${cmd} autohide-delay -float 0.0
  ${cmd} tilesize -int 32
  ${cmd} largesize -int 58
  ${cmd} springboard-columns -int 7
  ${cmd} springboard-rows -int 7

  ${cmd} trash-full -bool true
  ${cmd} magnification -bool true
  ${cmd} launchanim -bool true
  ${cmd} show-recents -bool true
  ${cmd} show-process-indicators -bool true
  ${cmd} expose-group-apps -bool true
  ${cmd} showhidden -bool true
  ${cmd} ResetLaunchPad -bool true

  ${cmd} autohide -bool false
  ${cmd} mru-spaces -bool false
}

function configureScreencapture() {
  local cmd=
  setCMDVariableAndCheckDomain com.apple.screencapture || return
  ${cmd} show-thumbnail -bool true
  ${cmd} include-date -bool false
  ${cmd} type 'png'
  ${cmd} location '~/Downloads'
}

function configureFinder() {
  local cmd=
  setCMDVariableAndCheckDomain com.apple.finder || return
  ${cmd} NewWindowTarget PfHm
  ${cmd} NewWindowTargetPath "file://${HOME}"
  ${cmd} FXPreferredGroupBy Kind
  ${cmd} FXArrangeGroupViewBy Name
  ${cmd} FXDefaultSearchScope SCcf

  ${cmd} StandardViewOptions '
  <dict>
    <key>ColumnViewOptions</key>
    <dict>
      <key>ArrangeBy</key>
      <string>dnam</string>
      <key>ColumnShowFolderArrow</key>
      <true />
      <key>ColumnShowIcons</key>
      <true />
      <key>ColumnWidth</key>
      <integer>220</integer>
      <key>FontSize</key>
      <integer>12</integer>
      <key>PreviewDisclosureState</key>
      <true />
      <key>SharedArrangeBy</key>
      <string>kipl</string>
      <key>ShowIconThumbnails</key>
      <true />
      <key>ShowPreview</key>
      <true />
    </dict>
  </dict>'
  ${cmd} DesktopViewSettings '
  <dict>
    <key>GroupBy</key>
    <string>Kind</string>
    <key>IconViewSettings</key>
    <dict>
      <key>arrangeBy</key>
      <string>name</string>
      <key>backgroundColorBlue</key>
      <real>1</real>
      <key>backgroundColorGreen</key>
      <real>1</real>
      <key>backgroundColorRed</key>
      <real>1</real>
      <key>backgroundType</key>
      <integer>0</integer>
      <key>gridOffsetX</key>
      <real>0.0</real>
      <key>gridOffsetY</key>
      <real>0.0</real>
      <key>gridSpacing</key>
      <real>100</real>
      <key>iconSize</key>
      <real>92</real>
      <key>labelOnBottom</key>
      <false/>
      <key>showIconPreview</key>
      <true/>
      <key>showItemInfo</key>
      <true/>
      <key>textSize</key>
      <real>12</real>
      <key>viewOptionsVersion</key>
      <integer>1</integer>
    </dict>
  </dict>'

  ${cmd} ShowPreviewPane -bool true
  ${cmd} ShowPathbar -bool true
  ${cmd} ShowStatusBar -bool true
  ${cmd} ShowMountedServersOnDesktop -bool true
  ${cmd} ShowRemovableMediaOnDesktop -bool true
  ${cmd} FXPreferredViewStyle clmv
  ${cmd} FXEnableRemoveFromICloudDriveWarning -bool true
  ${cmd} FXRemoveOldTrashItems -bool true
  ${cmd} _FXSortFoldersFirst -bool true
  ${cmd} _FXSortFoldersFirstOnDesktop -bool true

  ${cmd} ShowHardDrivesOnDesktop -bool false
  ${cmd} WarnOnEmptyTrash -bool false
  ${cmd} FXICloudDriveDocuments -bool false
  ${cmd} FXICloudDriveDesktop -bool false
  ${cmd} FXICloudDriveDeclinedUpgrade -bool false
  ${cmd} FXEnableExtensionChangeWarning -bool false
}

function configureMenuBarClock() {
  local cmd=
  setCMDVariableAndCheckDomain com.apple.menuextra.clock || return
  ${cmd} DateFormat 'EEE HH:mm:ss'
  ${cmd} ShowDayOfMonth -bool false
  ${cmd} ShowSeconds -bool false
}

function configureTextEdit() {
  local cmd=
  setCMDVariable com.apple.TextEdit
  ${cmd} RichText -bool false
}

function configureTimeMachine() {
  local cmd=
  setCMDVariable com.apple.TimeMachine
  ${cmd} DoNotOfferNewDisksForBackup -bool true
}

function configureMusic() {
  local cmd=
  setCMDVariable com.apple.Music
  ${cmd} userWantsPlaybackNotifications -bool false
}

function configureMenuBarItems() {
  local cmd=
  setCMDVariableAndCheckDomain com.apple.controlcenter || return
  ${cmd} 'NSStatusItem Visible Clock' -bool true
  ${cmd} 'NSStatusItem Visible Battery' -bool false
  ${cmd} 'NSStatusItem Visible WiFi' -bool false
  ${cmd} 'NSStatusItem Visible UserSwitcher' -bool false
  ${cmd} 'NSStatusItem Visible Sound' -bool false
  ${cmd} 'NSStatusItem Visible NowPlaying' -bool false
  ${cmd} 'NSStatusItem Visible Display' -bool false
  ${cmd} 'NSStatusItem Visible Bluetooth' -bool false
  ${cmd} 'NSStatusItem Visible ScreenMirroring' -bool false
  ${cmd} 'NSStatusItem Visible DoNotDisturb' -bool false
  ${cmd} 'NSStatusItem Visible AirDrop' -bool false
  ${cmd} 'NSStatusItem Visible FocusModes' -bool false
  ${cmd} 'NSStatusItem Visible AccessibilityShortcuts' -bool false

  setCMDVariable com.apple.controlcenter currentHost
  ${cmd} FocusModes -int 2
  ${cmd} ScreenMirroring -int 2
  ${cmd} BatteryShowPercentage -bool true
  ${cmd} Battery -int 8
  ${cmd} WiFi -int 8
  ${cmd} Bluetooth -int 8
  ${cmd} AirDrop -int 8
  ${cmd} Display -int 8
  ${cmd} Sound -int 8
  ${cmd} NowPlaying -int 8
  ${cmd} AccessibilityShortcuts -int 12
  ${cmd} UserSwitcher -int 9
}

function configureAirPlayMenuBarItem() {
  local cmd=
  setCMDVariable com.apple.airplay
  ${cmd} showInMenuBarIfPresent -bool true
}

function configureSpeechSynthesis() {
  local cmd=
  setCMDVariable com.apple.speech.synthesis.general.prefs
  ${cmd} TimeAnnouncementPrefs '<dict>
    <key>TimeAnnouncementsEnabled</key>
    <true/>
    <key>TimeAnnouncementsIntervalIdentifier</key>
    <string>EveryHourInterval</string>
    <key>TimeAnnouncementsPhraseIdentifier</key>
    <string>ShortTime</string>
    <key>TimeAnnouncementsVoiceSettings</key>
    <dict>
      <key>CustomVolume</key>
      <real>0.5</real>
    </dict>
  </dict>'
}

function configureSpotlight() {
  local cmd= name= enabled=
  setCMDVariable com.apple.Spotlight
  ${cmd} 'NSStatusItem Visible Item-0' -bool false

  local -A spitems=(
    [APPLICATIONS]='true'
    [MENU_CONVERSION]='true'
    [MENU_EXPRESSION]='true'
    [PDF]='true'
    [DOCUMENTS]='true'
    [CONTACT]='true'
    [EVENT_TODO]='true'
    [IMAGES]='true'

    [MENU_SPOTLIGHT_SUGGESTIONS]='false'
    [MENU_DEFINITION]='false'
    [SYSTEM_PREFS]='false'
    [DIRECTORIES]='false'
    [PRESENTATIONS]='false'
    [SPREADSHEETS]='false'
    [MESSAGES]='false'
    [BOOKMARKS]='false'
    [MUSIC]='false'
    [MOVIES]='false'
    [FONTS]='false'
    [MENU_OTHER]='false'
  )
  ${cmd} orderedItems '<array></array>'
  for name enabled in ${(kv)spitems}; do
    ${cmd} orderedItems -array-add "
    <dict>
      <key>enabled</key>
      <${enabled}/>
      <key>name</key>
      <string>${name}</string>
    </dict>";
  done

  setCMDVariable com.apple.Spotlight currentHost
  ${cmd} MenuItemHidden -bool true
}

function configureSiri() {
  local cmd=
  setCMDVariableAndCheckDomain com.apple.Siri || return
  ${cmd} StatusMenuVisible -bool true
  ${cmd} VoiceTriggerUserEnabled -bool true

  setCMDVariableAndCheckDomain com.apple.assistant.support || return
  ${cmd} 'Dictation Enabled' -bool true
  ${cmd} 'Siri Data Sharing Opt-In Status' -int 2
}

function configureSystemUIServer() {
  local cmd=
  setCMDVariableAndCheckDomain com.apple.systemuiserver || return
  ${cmd} menuExtras -array
}

function configureSpaces() {
  local cmd=
  setCMDVariableAndCheckDomain com.apple.spaces || return
  ${cmd} spans-displays -bool false
}

function configureHIToolbox() {
  local cmd=
  setCMDVariableAndCheckDomain com.apple.HIToolbox || return
  ${cmd} AppleCurrentKeyboardLayoutInputSourceID com.apple.keylayout.German
  ${cmd} AppleFnUsageType -int 3
  ${cmd} AppleDictationAutoEnable -int 1
}

function configureTextInputMenuItem() {
  local cmd=
  setCMDVariableAndCheckDomain com.apple.TextInputMenu || return
  ${cmd} visible -bool false

  setCMDVariableAndCheckDomain com.apple.TextInputMenuAgent || return
  ${cmd} 'NSStatusItem Visible Item-0' -bool false
}

function configureSafari() {
  local cmd=
  setCMDVariable com.apple.Safari.SandboxBroker || return
  ${cmd} ShowDevelopMenu -bool true

  checkDomain com.apple.Safari >&! /dev/null || runAndQuitApp Safari || return
  setCMDVariableAndCheckDomain com.apple.Safari || return
  ${cmd} HistoryAgeInDaysLimit -int 31
  ${cmd} NewTabBehavior -int 1
  ${cmd} NewWindowBehavior -int 0
  ${cmd} WebKitMinimumFontSize -int 0
  ${cmd} WebKitDefaultTextEncodingName 'utf-8'
  ${cmd} WebKitPreferences.defaultTextEncodingName 'utf-8'
  ${cmd} HomePage 'https://astzweig.de'

  ${cmd} AutoFillFromAddressBook -bool true
  ${cmd} Command1Through9SwitchesTabs -bool true
  ${cmd} CommandClickMakesTabs -bool true
  ${cmd} EnableNarrowTabs -bool true
  ${cmd} ExcludePrivateWindowWhenRestoringSessionAtLaunch -bool true
  ${cmd} ExtensionsEnabled -bool true
  ${cmd} IncludeDevelopMenu -bool true
  ${cmd} OpenPrivateWindowWhenNotRestoringSessionAtLaunch -bool true
  ${cmd} ReadingListSaveArticlesOfflineAutomatically -bool true
  ${cmd} ShowFullURLInSmartSearchField -bool true
  ${cmd} UniversalSearchEnabled -bool true
  ${cmd} WarnAboutFraudulentWebsites -bool true
  ${cmd} WebKitJavaScriptEnabled -bool true
  ${cmd} WebKitPreferences.allowsPictureInPictureMediaPlayback -bool true
  ${cmd} WebKitPreferences.applePayEnabled -bool true
  ${cmd} WebKitPreferences.developerExtrasEnabled -bool true
  ${cmd} WebKitPreferences.hiddenPageDOMTimerThrottlingAutoIncreases -bool true
  ${cmd} WebKitPreferences.invisibleMediaAutoplayNotPermitted -bool true
  ${cmd} WebKitPreferences.javaScriptCanOpenWindowsAutomatically -bool true
  ${cmd} WebKitPreferences.javaScriptEnabled -bool true
  ${cmd} WebKitPreferences.shouldSuppressKeyboardInputDuringProvisionalNavigation -bool true

  ${cmd} AlwaysRestoreSessionAtLaunch -bool false
  ${cmd} AutoFillCreditCardData -bool false
  ${cmd} AutoFillMiscellaneousForms -bool false
  ${cmd} AutoFillPasswords -bool false
  ${cmd} AutoOpenSafeDownloads -bool false
  ${cmd} ExcludePrivateWindowWhenRestoringSessionAtLaunch -bool false
  ${cmd} ShowSidebarInTopSites -bool false
  ${cmd} ShowStandaloneTabBar -bool false
  ${cmd} SuppressSearchSuggestions -bool false
  ${cmd} WebKitPreferences.needsStorageAccessFromFileURLsQuirk -bool false
  ${cmd} WebKitPreferences.privateClickMeasurementEnabled -bool false
  ${cmd} WebKitPreferences.shouldAllowUserInstalledFonts -bool false
  ${cmd} WebKitPreferences.tabFocusesLinks -bool false

  setCMDVariableAndCheckDomain com.apple.coreservices.uiagent || return
  ${cmd} CSUIHasSafariBeenLaunched -bool true
}

function configureCalendar() {
  local cmd=
  setCMDVariable com.apple.iCal
  ${cmd} 'n days of week' -int 7
  ${cmd} 'number of hours displayed' -int 16
  ${cmd} 'first minute of day time range' -int 450
  ${cmd} 'last minute of day time range' -int 1440
  ${cmd} 'first minute of work hours' -int 480
  ${cmd} 'last minute of work hours' -int 1080
  ${cmd} 'Default duration in minutes for new event' -int 30
  ${cmd} 'last calendar view description' -string Monthly
  ${cmd} 'privacyPaneHasBeenAcknowledgedVersion' -int 4

  ${cmd} 'Show Week Numbers' -bool true
  ${cmd} 'TimeZone support enabled' -bool true
  ${cmd} 'Show heat map in Year View' -bool true
  ${cmd} 'Show multi day timed events as all day events' -bool true
}

function configureMail() {
  local cmd=
  setCMDVariable com.apple.mail
  ${cmd} 'ShowReplyToHeader' -int 1
  ${cmd} 'ShowBccHeader' -int 1
  ${cmd} 'MessageListShowDateTime' -int 1
  ${cmd} 'EnableToCcInMessageList' -int 1
  ${cmd} 'SendFormat' -string Plain

  ${cmd} 'ShowActivity' -bool true
  ${cmd} 'MailShowFlags' -bool true
  ${cmd} 'ShowComposeFormatInspectorBar' -bool true
  ${cmd} 'PMPrintingExpandedStateForPrint2' -bool true

  ${cmd} 'ShouldShowUnreadMessagesInBold' -bool false
  ${cmd} 'ReplyToSelf' -bool false
  ${cmd} 'BccSelf' -bool false
  ${cmd} 'LogDebuggingInformation' -bool false
  ${cmd} 'EncryptOutgoingMessages' -bool false

  setCMDVariable com.apple.mail-shared
  ${cmd} 'AddressDisplayMode' -int 3
  ${cmd} 'AlertForNonmatchingDomains' -bool true
  ${cmd} 'DisableURLLoading' -bool true
  ${cmd} 'ExpandPrivateAliases' -bool true
}

function configureTerminal() {
  local cmd= args=(com.apple.Terminal '') THEME=Basic
  local prefix="Window Settings.${THEME}"

  setCMDVariable com.apple.Terminal
  ${cmd} 'Default Window Settings' -string "${THEME}"
  ${cmd} 'Startup Window Settings' -string "${THEME}"
  ${cmd} 'SecureKeyboardEntry' -bool true

  xDefaults "${args[@]}" ${prefix}.shellExitAction -integer 1
  xDefaults "${args[@]}" ${prefix}.rowCount -integer 30
  xDefaults "${args[@]}" ${prefix}.columnCount -integer 110
  xDefaults "${args[@]}" ${prefix}.ScrollbackLines -integer 5000
  xDefaults "${args[@]}" ${prefix}.ShouldLimitScrollback -integer 1
  xDefaults "${args[@]}" ${prefix}.CharacterEncoding -integer 4
  xDefaults "${args[@]}" ${prefix}.ShowActiveProcessArgumentsInTitle -bool false
  xDefaults "${args[@]}" ${prefix}.ShouldRestoreContent -bool false
  xDefaults "${args[@]}" ${prefix}.ShowTerminalInDockIcon -bool false
  xDefaults "${args[@]}" ${prefix}.ShowRepresentedURLInTabTitle -bool false
  xDefaults "${args[@]}" ${prefix}.ShowActiveProcessArgumentsInTabTitle -bool false
}

function configureNotes() {
  local cmd=
  setCMDVariable com.apple.Notes
  ${cmd} hasShownWelcomeScreen -bool true
}

function configureReminders() {
  local cmd=
  setCMDVariable com.apple.remindd
  ${cmd} todayNotificationFireTime -integer 1000
}

function configureDiskUtility() {
  local cmd=
  setCMDVariable com.apple.DiskUtility
  ${cmd} SidebarShowAllDevices -bool true
}

function configureLoginSettings() {
  local cmd=
  setCMDVariableAndCheckDomain com.apple.loginwindow || return
  ${cmd} TALLogoutSavesState -bool false
}

function configureHookshot() {
  local cmd=
  checkDomain com.knollsoft.Hookshot >&! /dev/null || runAndQuitApp 'Rectangle Pro' || return
  setCMDVariableAndCheckDomain com.knollsoft.Hookshot || return
  ${cmd} 'launchOnLogin' -bool true
  ${cmd} 'iCloudSync' -integer 1
  ${cmd} 'hideMenubarIcon' -bool true
  ${cmd} 'longshotDist' -float 200
  ${cmd} 'reticleSize' -integer 11
  ${cmd} 'reticleDisplayMinDist' -float 2.7
  ${cmd} 'mainReticleSpec' -string '{"b":10,"t":11,"id":0,"l":0,"bl":13,"r":1,"tl":15,"br":14,"tr":16}'
  ${cmd} 'longReticleSpec' -string '{"r":5,"id":1,"b":12,"l":4,"t":12}'
}

function configure_system() {
  config setappname de.astzweig.macos.user-system-configuration
  if test "`config read hasRun`" = yes; then
    askUser confirm -n 'The system settings have already been set. Run again?' < $(getProcessTTY) || return
  fi
  indicateActivity -- 'Quit System Preferences' osascript -e 'tell application "System Preferences" to quit'
  indicateActivity -- 'Make Library folder visible' showLibraryFolder
  indicateActivity -- 'Configure global preferences' configureGlobalSettings
  indicateActivity -- 'Configure printing preferences app' configurePrintingApp
  indicateActivity -- 'Configure screensaver preferences' configureScreensaver
  indicateActivity -- 'Configure dock app preferences' configureDock
  indicateActivity -- 'Configure screen capture app preferences' configureScreencapture
  indicateActivity -- 'Configure Finder app preferences' configureFinder
  indicateActivity -- 'Configure menu bar clock preferences' configureMenuBarClock
  indicateActivity -- 'Configure TextEdit app preferences' configureTextEdit
  indicateActivity -- 'Configure TimeMachine app preferences' configureTimeMachine
  indicateActivity -- 'Configure Music app preferences' configureMusic
  indicateActivity -- 'Configure menu bar items preferences' configureMenuBarItems
  indicateActivity -- 'Configure AirPlay menu bar item preferences' configureAirPlayMenuBarItem
  indicateActivity -- 'Configure speech synthesis' configureSpeechSynthesis
  indicateActivity -- 'Configure Spotlight preferences' configureSpotlight
  indicateActivity -- 'Configure Siri preferences' configureSiri
  indicateActivity -- 'Configure system UI server preferences' configureSystemUIServer
  indicateActivity -- 'Configure spaces preferences' configureSpaces
  indicateActivity -- 'Configure HIToolbox preferences' configureHIToolbox
  indicateActivity -- 'Configure text input menu bar item preferences' configureTextInputMenuItem
  indicateActivity -- 'Configure Safari app preferences' configureSafari
  indicateActivity -- 'Configure Calendar app preferences' configureCalendar
  indicateActivity -- 'Configure Mail app preferences' configureMail
  indicateActivity -- 'Configure Terminal app preferences' configureTerminal
  indicateActivity -- 'Configure Notes app preferences' configureNotes
  indicateActivity -- 'Configure Reminders app preferences' configureReminders
  indicateActivity -- 'Configure DiskUtility app preferences' configureDiskUtility
  indicateActivity -- 'Configure Login preferences' configureLoginSettings
  indicateActivity -- 'Configure Hookshot app preferences' configureHookshot
  config write yes hasRun
}



if [[ "${ZSH_EVAL_CONTEXT}" == toplevel ]]; then
  source ../lib.sh || exit
  app_main "$@"
fi
